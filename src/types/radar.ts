/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a user */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate passwordless login with email */
        post: operations["initiateLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify one-time password and get JWT */
        post: operations["verifyOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get account details */
        get: operations["getAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competitors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a competitors details */
        get: operations["getCompetitorDetails"];
        put?: never;
        /** Create a competitors details */
        post: operations["createCompetitorDetails"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/competitors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a competitors details */
        put: operations["updateCompetitorDetails"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topics/audienceRelevance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the Orgs topics audience relevance */
        get: operations["getTopicAudienceRelevance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topics/incidenceAndEngagement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the Orgs topics incidence and engagement */
        get: operations["getTopicIncidenceAndEngagement"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topics/summaries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the Orgs topics summaries */
        get: operations["getTopicSummaries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the current contacts */
        get: operations["getContacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/radar/contentToPromote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve content to promote */
        get: operations["getRadarContentToPromote"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/radar/topicsToWriteAbout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve topics to write about */
        get: operations["getRadarTopicsToWriteAbout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/radar/topicsIncidenceAndEngagement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve topics incidence and engagement */
        get: operations["getRadarTopicsIncidenceAndEngagement"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/radar/personalizationScore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve personalization score */
        get: operations["getRadarPersonalizationScore"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/radar/contentInfluencedRevenue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve content influenced revenue */
        get: operations["getRadarContentInfluencedRevenue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/radar/newPersonalizedEngagementsScore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve new personalized engagements score */
        get: operations["getRadarNewPersonalizedEngagementsScore"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/radar/personalizedContentEngagementRate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve personalized content engagement rate */
        get: operations["getRadarPersonalizedContentEngagementRate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example 645d42381e5e42f7639def7f */
        ID: string;
        /**
         * @description Specific date range to filter the results. Dates should be in the ISO 8601 format 'YYYY-MM-DD'.
         * @example {
         *       "from": "2023-01-01",
         *       "to": "2023-01-08"
         *     }
         */
        DateRange: {
            /**
             * Format: date
             * @example 2023-01-01
             */
            from: string;
            /**
             * Format: date
             * @example 2023-01-08
             */
            to?: string;
        };
        /**
         * Format: int32
         * @example 1
         */
        MinInteger: number;
        /**
         * Format: int32
         * @example 100
         */
        MaxInteger: number;
        /**
         * @description Unique industries in the result set
         * @example [
         *       "Retail",
         *       "Manufacturing"
         *     ]
         */
        UniqueIndustries: string[];
        /**
         * @description Unique job titles in the result set
         * @example [
         *       "CEO",
         *       "CTO"
         *     ]
         */
        UniqueJobTitles: string[];
        /**
         * @description Unique companies in the result set
         * @example [
         *       "Ford",
         *       "Walmart"
         *     ]
         */
        UniqueCompanies: string[];
        /**
         * @description Unique stages in the result set
         * @example [
         *       "Lead",
         *       "Customer"
         *     ]
         */
        UniqueStages: string[];
        /** @description The list ids this result set can be filtered by */
        UniqueListIds: string[];
        InsightsCountRange: {
            min?: components["schemas"]["MinInteger"];
            max?: components["schemas"]["MaxInteger"];
        };
        FeaturePaginatableOffSetBasedMetaData: {
            /** Format: int32 */
            totalItems: number;
            /** Format: int32 */
            currentOffset: number;
        };
        FeatureContactsFilteringMetaData: {
            distinctValues?: {
                uniqueCompanies?: components["schemas"]["UniqueCompanies"];
                uniqueIndustries?: components["schemas"]["UniqueIndustries"];
                uniqueJobTitles?: components["schemas"]["UniqueJobTitles"];
                uniqueStages?: components["schemas"]["UniqueStages"];
                uniqueListIds?: components["schemas"]["UniqueListIds"];
                insightsCountRange?: components["schemas"]["InsightsCountRange"];
            };
        };
        /** @description Name of the competitor. */
        FieldCompetitorName: string;
        /**
         * Format: int32
         * @description Count of the data items.
         */
        FieldCount: number;
        /**
         * Format: date-time
         * @description High precision ISO 8601 datetime format.
         * @example 2021-08-30T23:01:14.274085491+15:55
         */
        FieldTimestamp: string;
        Metric: {
            total?: components["schemas"]["FieldCount"];
            /**
             * Format: float
             * @description Percentage change of the metric.
             * @example 0.5
             */
            changePercentage?: number;
        };
        ApiResponseMessage: {
            message?: string;
        };
        ContactsDetail: {
            /** @description The unique identifier of the Contact */
            id: components["schemas"]["ID"];
            /** @description First name of the contact */
            firstName: string;
            /** @description Last name of the contact */
            lastName: string;
            /** @description Email address of the contact */
            email: string;
            /** @description Company where the contact is currently employed */
            company: string;
            /** @description Number of insights the contact has */
            insights: number;
            /** @description Number of recommendations the contact has */
            recommendations: number;
            /** @description Industry of the contact */
            industry: string;
            /** @description Job title of the contact */
            jobTitle: string;
            /** @description Stage of the contact in the sales cycle */
            stage: string;
        };
        Content: {
            /** @description The unique identifier of the Content */
            id: components["schemas"]["ID"];
            /** @description Title of the article */
            title: string;
            /** @description The time the article was published */
            publishDate: components["schemas"]["FieldTimestamp"];
            /** @description The URL of the article */
            url: string;
            /** @description The URL of the image */
            imageUrl: string;
            /**
             * @description The type of article
             * @enum {string}
             */
            articleType: "NEWS" | "CONTENT" | "WEBSITE";
            /** @description The number of contacts that have this content recommended but not delivered yet */
            matches: number;
            /** @description The source of the article */
            source: string;
            /** @description The engagement score percentage of the content */
            engagementScore: number;
        };
        ContentToPromote: {
            /** @description The unique identifier of the Content */
            id: components["schemas"]["ID"];
            /** @description Title of the article */
            title: string;
            /** @description The URL of the article */
            url: string;
            /** @description The URL of the image */
            imageUrl: string;
            /** @description The number of contacts that have this content recommended but not delivered or seen yet */
            matches?: number;
        };
        RelatedContent: components["schemas"]["Content"] & {
            /** @description The number of contacts matching this content */
            matches: number;
        };
        TopicToWriteAbout: {
            id: components["schemas"]["ID"];
            /** @description The value of the topic */
            value: string;
            /** @description The number of contacts that have this topic */
            contactIncidence: number;
            /** @description The number of topics that have this topic */
            topicIncidence: number;
        };
        TopicIncidenceAndEngagement: {
            /** @example Topic 1 */
            value: string;
            /** @example 10 */
            incidence: number;
            /** @example 20 */
            incidencePercentile: number;
            /** @example 20 */
            engagement: number;
            /** @example 30 */
            engagementPercentile: number;
        };
        RadarPersonalizationScore: {
            /**
             * @example A
             * @enum {string}
             */
            score: "A" | "B" | "F";
            /**
             * @example A
             * @enum {string}
             */
            changeScore: "A" | "B" | "F";
        };
        RadarContentInfluencedRevenue: {
            /** @example 1000 */
            revenue: number;
            /** @example 0.3 */
            changePercentage: number;
        };
        RadarNewPersonalizedEngagementsScore: {
            /** @example 1000 */
            engagements?: number;
            /** @example 0.3 */
            changePercentage?: number;
        };
        RadarPersonalizedContentEngagementRate: {
            /** @example 100 */
            engagementRate?: number;
            /** @example 0.3 */
            changePercentage?: number;
        };
        /**
         * @description Topics to filter by
         * @example [
         *       "income tax",
         *       "other stuff"
         *     ]
         */
        TopicsFilter: string[];
        /**
         * @description Audience Relevance to filter by
         * @example [
         *       "NONE",
         *       "LOW"
         *     ]
         */
        AudienceRelevanceFilter: ("NONE" | "LOW" | "MEDIUM" | "HIGH")[];
        /**
         * Hubspot
         * @example {
         *       "listId": "645d42381e5e42f7639def7f",
         *       "type": "HUBSPOT",
         *       "connected": true,
         *       "contactLists": [
         *         {
         *           "listId": 10,
         *           "name": "List 1"
         *         },
         *         {
         *           "listId": 11,
         *           "name": "List 2"
         *         }
         *       ],
         *       "syncAllContacts": true,
         *       "membershipListIds": [
         *         {
         *           "listId": 10,
         *           "name": "List 1"
         *         },
         *         {
         *           "listId": 11,
         *           "name": "List 2"
         *         }
         *       ]
         *     }
         */
        HubspotSettingsIntegration: components["schemas"]["SettingsIntegration"] & {
            availableContactLists?: components["schemas"]["ContactLists"] & unknown;
        } & ({
            contactLists: components["schemas"]["ContactLists"] & unknown;
        } | {
            /** @description Whether to sync all contacts */
            syncAllContacts: boolean;
        });
        /**
         * Pardot
         * @example {
         *       "id": "645d42381e5e42f7639def7f",
         *       "type": "PARDOT",
         *       "connected": true,
         *       "businessUnitId": "645d42381e5e42f7639def7f"
         *     }
         */
        PardotSettingsIntegration: components["schemas"]["SettingsIntegration"] & {
            /** @description The business unit of the integration */
            businessUnitId?: string;
        };
        /**
         * Marketo
         * @example {
         *       "id": "645d42381e5e42f7639def7f",
         *       "type": "MARKETO",
         *       "connected": true
         *     }
         */
        MarketoSettingsIntegration: components["schemas"]["SettingsIntegration"];
        /**
         * Google Analytics
         * @example {
         *       "id": "645d42381e5e42f7639def7f",
         *       "type": "GOOGLE_ANALYTICS",
         *       "connected": true,
         *       "propertyId": "645d42381e5e42f7639def7f"
         *     }
         */
        GoogleAnalyticsSettingsIntegration: components["schemas"]["SettingsIntegration"] & {
            /** @description The property ID of the integration */
            propertyId?: string;
        };
        SettingsIntegration: {
            /** @description The unique identifier of the integration */
            id: components["schemas"]["ID"];
            /**
             * @description The type of the integration
             * @enum {string}
             */
            type: "HUBSPOT" | "PARDOT" | "MARKETO" | "GOOGLE_ANALYTICS";
            /** @description Whether the integration is connected */
            connected: boolean;
        };
        /** @description The unique identifier of the contact list */
        ContactListId: string;
        ContactLists: {
            listId?: components["schemas"]["ContactListId"];
            /** @description The name of the contact list */
            name?: string;
        }[];
        CompetitorDetails: {
            /** @example Acme */
            name: string;
            /** @example https://www.acme.com */
            websiteURL: string;
            /** @example acme */
            linkedinSlug: string;
        };
    };
    responses: {
        /** @description The server could not understand the request due to invalid syntax. */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Invalid request parameters."
                 *     } */
                "application/json": components["schemas"]["ApiResponseMessage"];
            };
        };
        /** @description The client must authenticate itself to get the requested response. */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Authentication is required to access this resource."
                 *     } */
                "application/json": components["schemas"]["ApiResponseMessage"];
            };
        };
        /** @description The client does not have access rights to the content. */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "You do not have the necessary permissions to access this resource."
                 *     } */
                "application/json": components["schemas"]["ApiResponseMessage"];
            };
        };
        /** @description The server can not find the requested resource. */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Resource not found."
                 *     } */
                "application/json": components["schemas"]["ApiResponseMessage"];
            };
        };
        /** @description The server cannot produce a response matching the list of acceptable values defined in the request's headers. */
        NotAcceptable: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Requested format not acceptable."
                 *     } */
                "application/json": components["schemas"]["ApiResponseMessage"];
            };
        };
        /** @description The request could not be completed due to a conflict with the current state of the resource. */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Conflict with the current state of the resource."
                 *     } */
                "application/json": components["schemas"]["ApiResponseMessage"];
            };
        };
        /** @description The server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions */
        UnprocessableEntity: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Unable to process the contained instructions"
                 *     } */
                "application/json": components["schemas"]["ApiResponseMessage"];
            };
        };
        /** @description The user has sent too many requests in a given amount of time. */
        TooManyRequests: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Rate limit exceeded. Please try again later."
                 *     } */
                "application/json": components["schemas"]["ApiResponseMessage"];
            };
        };
        /** @description The server has encountered a situation it doesn't know how to handle. */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "An unexpected error has occurred."
                 *     } */
                "application/json": components["schemas"]["ApiResponseMessage"];
            };
        };
        /** @description An unexpected error has occurred. */
        Error: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "An unexpected error has occurred."
                 *     } */
                "application/json": components["schemas"]["ApiResponseMessage"];
            };
        };
    };
    parameters: {
        /** @description Date range filter */
        DateFilter: components["schemas"]["DateRange"];
        /**
         * @description Number of items to skip.
         * @example 12
         */
        PaginatableOffSetBased: number;
        /**
         * @description Number of items to return.
         * @example 12
         */
        PaginatableLimitBased: number;
        /**
         * @description Sort by field.
         * @example lastName
         */
        ContactsSortBy: "firstName" | "lastName" | "email" | "company" | "insights" | "recommendations";
        /**
         * @description Sort by field.
         * @example coverageScore
         */
        TopicsSummariesSortBy: "value" | "contacts" | "topicCompetition" | "coverageScore";
        /**
         * @description Sort direction.
         * @example desc
         */
        SortDirection: "asc" | "desc";
        ContactsFilter: {
            /**
             * @description Insights count range to filter by
             * @example {
             *       "min": 1,
             *       "max": 100
             *     }
             */
            insights?: {
                /**
                 * Format: int32
                 * @example 1
                 */
                min?: number;
                /**
                 * Format: int32
                 * @example 100
                 */
                max?: number;
            };
            /**
             * @description Company names to filter by
             * @example [
             *       "Acme",
             *       "Globex"
             *     ]
             */
            company?: string[];
            /** @description Contact list ID to filter by */
            listId?: components["schemas"]["ContactListId"];
        };
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @example user@example.com
                     */
                    email: string;
                };
            };
        };
        responses: {
            /** @description User created successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    initiateLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @example user@example.com
                     */
                    email: string;
                };
            };
        };
        responses: {
            /** @description One-time password sent successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            429: components["responses"]["TooManyRequests"];
        };
    };
    verifyOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @example user@example.com
                     */
                    email: string;
                    /** @example 123456 */
                    otp: string;
                };
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
                        token: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    getAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /**
             * @description Successful operation
             * @default {
             *       "$ref": "#/components/responses/Error"
             *     }
             */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 123 */
                        id?: string;
                        /** @example Acme */
                        name?: string;
                        status?: {
                            /** @example 50 */
                            progress?: number;
                            /** @enum {string} */
                            label?: "PROFILE-IN-PROGRESS" | "PERSONALIZATION-IN-PROGRESS" | "RADAR-CALIBRATION-IN-PROGRESS";
                        };
                    };
                };
            };
        };
    };
    getCompetitorDetails: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompetitorDetails"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    createCompetitorDetails: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompetitorDetails"];
            };
        };
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    updateCompetitorDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompetitorDetails"];
            };
        };
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getTopicAudienceRelevance: {
        parameters: {
            query?: {
                filter?: {
                    listId?: components["schemas"]["ContactListId"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description number of topics in this category
                         * @example 1
                         */
                        none?: number;
                        /**
                         * @description number of topics in this category
                         * @example 2
                         */
                        low?: number;
                        /**
                         * @description number of topics in this category
                         * @example 3
                         */
                        medium?: number;
                        /**
                         * @description number of topics in this category
                         * @example 4
                         */
                        high?: number;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getTopicIncidenceAndEngagement: {
        parameters: {
            query?: {
                filter?: {
                    listId?: components["schemas"]["ContactListId"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopicIncidenceAndEngagement"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getTopicSummaries: {
        parameters: {
            query?: {
                /**
                 * @description Number of items to skip.
                 * @example 12
                 */
                offset?: components["parameters"]["PaginatableOffSetBased"];
                /**
                 * @description Number of items to return.
                 * @example 12
                 */
                limit?: components["parameters"]["PaginatableLimitBased"];
                /**
                 * @description Sort by field.
                 * @example coverageScore
                 */
                sortBy?: components["parameters"]["TopicsSummariesSortBy"];
                /**
                 * @description Sort direction.
                 * @example desc
                 */
                sortDirection?: components["parameters"]["SortDirection"];
                filter?: {
                    topic?: components["schemas"]["TopicsFilter"];
                    audienceRelevance?: components["schemas"]["AudienceRelevanceFilter"];
                    listId?: components["schemas"]["ContactListId"];
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 10 */
                        totalItems?: number;
                        /** @example 10 */
                        currentOffset?: number;
                        content?: {
                            id?: components["schemas"]["ID"];
                            /** @example Topic 1 */
                            value?: string;
                            /** @example 10 */
                            contacts?: number;
                            /** @example 20 */
                            topicCompetition?: number;
                            /** @example 30 */
                            coverageScore?: number;
                        }[];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getContacts: {
        parameters: {
            query?: {
                /**
                 * @description Number of items to skip.
                 * @example 12
                 */
                offset?: components["parameters"]["PaginatableOffSetBased"];
                /**
                 * @description Number of items to return.
                 * @example 12
                 */
                limit?: components["parameters"]["PaginatableLimitBased"];
                /**
                 * @description Sort by field.
                 * @example lastName
                 */
                sortBy?: components["parameters"]["ContactsSortBy"];
                /**
                 * @description Sort direction.
                 * @example desc
                 */
                sortDirection?: components["parameters"]["SortDirection"];
                filter?: components["parameters"]["ContactsFilter"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeaturePaginatableOffSetBasedMetaData"] & components["schemas"]["FeatureContactsFilteringMetaData"] & {
                        content?: components["schemas"]["ContactsDetail"][];
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getRadarContentToPromote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContentToPromote"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getRadarTopicsToWriteAbout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopicToWriteAbout"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getRadarTopicsIncidenceAndEngagement: {
        parameters: {
            query?: {
                /** @description Date range filter */
                dateFilter?: components["parameters"]["DateFilter"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopicIncidenceAndEngagement"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getRadarPersonalizationScore: {
        parameters: {
            query?: {
                /** @description Date range filter */
                dateFilter?: components["parameters"]["DateFilter"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadarPersonalizationScore"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getRadarContentInfluencedRevenue: {
        parameters: {
            query?: {
                /** @description Date range filter */
                dateFilter?: components["parameters"]["DateFilter"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadarContentInfluencedRevenue"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getRadarNewPersonalizedEngagementsScore: {
        parameters: {
            query?: {
                /** @description Date range filter */
                dateFilter?: components["parameters"]["DateFilter"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadarNewPersonalizedEngagementsScore"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
    getRadarPersonalizedContentEngagementRate: {
        parameters: {
            query?: {
                /** @description Date range filter */
                dateFilter?: components["parameters"]["DateFilter"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadarPersonalizedContentEngagementRate"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            406: components["responses"]["NotAcceptable"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
            default: components["responses"]["Error"];
        };
    };
}
